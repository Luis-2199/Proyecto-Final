})
#Outputs analisis grafico
output$descomp_STL <- renderHighchart({
if(input$descMet == "STL"){
highcharter::hchart(stl(serie_t_trans(), s.window = "per")) %>% hc_title(text = "Descomposición temporal")
}
})
output$descomp <- renderPlotly({
if(input$descMet == "Medias Moviles"){
data_cool_h_2_descomposition <- stats::decompose(serie_t_trans(), type = "additive")
(tibble(time = time(data_cool_h_2_descomposition$x),
Datos = data_cool_h_2_descomposition$x,
Tendencia = data_cool_h_2_descomposition$trend,
Estacionalidad = data_cool_h_2_descomposition$seasonal,
Remanente = data_cool_h_2_descomposition$random) %>%
gather("type", "value", 2:5) %>%
mutate(type = factor(type, levels = c("Datos", "Tendencia", "Estacionalidad", "Remanente"))) %>%
ggplot2::ggplot(aes(x = time, y = value)) +
geom_line() +
facet_grid(type~., scales = "free_y") +
labs(x = "Años", y = "Precio promedio mensual") +
scale_y_continuous(label = comma)+
ggtitle("Descomposición temporal")) %>% plotly::ggplotly()
}
})
output$acf <- renderPlot({
acf <- autoplot(acf(serie_t_trans(),plot = FALSE), colour = "darkorchid4", size = 1) +
geom_hline(yintercept = 0) +
ggtitle("Autocorrelación Simple") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"), plot.title = element_text(size = 14, face = "bold"))
pacf <- autoplot(pacf(serie_t_trans(),plot = FALSE), colour = "darkorchid4", size = 1) +
geom_hline(yintercept = 0) +
ggtitle("Autocorrelación Parcial") +
labs(y = "Partial ACF") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"), plot.title = element_text(size = 14, face = "bold"))
acf + pacf
})
#Outputs modelo
output$modelo <- renderUI({
HTML(paste("<h1>", modelo_bueno(), "</h1>", "<h2>",
"AIC =", toString(modelo_bueno()$aic), "</h2>"))
})
output$grafComp <- renderPlotly({
autoplot(serie_drag(), color = "black") +
autolayer(fitted(modelo_bueno()), color = "royalblue1") +
labs(y = "Promedio mensual de precios", x = "Tiempo")+
scale_y_continuous(label = comma)+
ggtitle("Gráfica comparativa") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
})
output$resid <- renderPlot({
gg1 <- autoplot(modelo_bueno()$residuals) + labs(x = NULL, y = NULL)+
scale_y_continuous(label = comma)+
ggtitle("Residuales del modelo")+
theme(plot.title = element_text(size = 16)) +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
gg2 <- autoplot(acf(modelo_bueno()$residuals,plot = FALSE), colour = "darkorchid4", size = 1) +
geom_hline(yintercept = 0)+
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid")) + ggtitle(NULL)
gg3 <- ggpubr::gghistogram(modelo_bueno()$residuals) + labs(x = "Residuales", y = "Conteo") + scale_x_continuous(label = comma)
(gg1)/ (gg2 + gg3)
})
#Output pruebas
output$ljung <- renderUI({
ljung <- forecast::checkresiduals(modelo_bueno(), plot = F)
p_val <- NULL
res <- NULL
if(ljung$p.value < .05){
res <- "se rechaza la hipótesis de independencia en los residuales."
}else{
res <- "no se rechaza la hipótesis de independencia en los residuales."
}
if(ljung$p.value < 2*(10^(-16))){
p_val <- "<2e-16"
}else{
p_val <- toString(ljung$p.value)
}
return(paste("Se obtuvo un <b>p-value</b> de:<b>", p_val, '</b><br/>',
"Para un nivel de significancia de 5%,<b>", res, "</b>") %>% HTML())
})
output$df <- renderUI({
ADF <- tseries::adf.test(modelo_bueno()$residuals)
p_val <- NULL
res <- NULL
if(ADF$p.value < .05){
res <- "se rechaza la existencia de una raíz unitaria, por lo que se acepta que los residuales son estacionarios."
}else{
res <- "no se rechaza la no estacionariedad en residuales."
}
if(ADF$p.value < 0.01){
p_val <- "<0.01"
}else{
p_val <- toString(ADF$p.value)
}
return(paste("Se obtuvo un <b>p-value</b> de:<b>", p_val, '</b><br/>',
"Para un nivel de significancia de 5%,<b>", res, "</b>") %>% HTML())
})
output$kpss <- renderUI({
KPSS <- tseries::kpss.test(modelo_bueno()$residuals)
est <- NULL
res <- NULL
if(KPSS$statistic >= 0.347){
res <- "se rechaza la estacionariedad en residuales."
}else{
res <- "no se rechaza la estacionariedad en residuales."
}
if(KPSS$statistic < 2*(10^(-16))){
est <- "<2e-16"
}else{
est <- toString(KPSS$statistic)
}
return(paste("Se obtuvo un <b>estadístico de prueba</b> de:<b>", est, '</b><br/>',
"Para un nivel de significancia de 10%,<b>", res, "</b>") %>% HTML())
})
#Outputs Prediccion
output$pred <- renderPlot({
pred() %>% autoplot()+
scale_y_continuous(label = comma)+
labs(x = "Tiempo", y = "Precio mensual promedio ") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
})
output$valPred <- renderDT(tabla_pred(), options = list(lengthChange = FALSE, pageLength = 10))
output$descarga <- downloadHandler(
filename = function(){"predicciones.csv"},
content = function(fname){
write.csv(tabla_pred(), fname)
}
)
}
shinyApp(ui, server)
}
library(shiny)
library(tidyverse)
library(lubridate)
library(DT)
library(shinythemes)
library(plotly)
library(highcharter)
library(ggpubr)
library(gridExtra)
library(latex2exp)
library(scales)
library(patchwork)
library(egg)
# OJO REMARCADO: Antes de correr la Shiny, correr esta parte
{
data_raw <- read_csv("raw_sales.csv")
data_raw
data_raw_show <- read_csv("raw_sales.csv")
data_raw_show <- data_raw_show %>% filter(price <= 3900000) %>%
mutate(datesold = as.Date(datesold, format = "%d/%m/%Y"))
data_raw_show
data_cool <- data_raw_show %>%
dplyr::ungroup() %>%
filter(datesold >= "2008-08-01")
serie_cool <- ts(data_cool$price, start = c(2008,8), frequency = 12)
Modelo_cool <- forecast::Arima(serie_cool, order= c(0,1,1), seasonal = list(order=c(0,1,1), period=12))
}
if(interactive()){
ui <- navbarPage(theme = shinytheme("flatly"), "Chainy",
tabPanel("Serie de Tiempo",
sidebarLayout(
sidebarPanel(
selectInput("propType", label = "Tipo de Propiedad",
choices = c("Casa", "Apartamento")),
conditionalPanel( # Por si seleccionan "Casa"
condition = "input.propType == 'Casa'",
sliderInput("numHab", label = "Número de Habitaciones",
value = 2, min = 2, max = 5, step = 1)
),# Termina el panel condicional "Casa"
conditionalPanel( # Por si seleccionan "Apartamento"
condition = "input.propType == 'Apartamento'",
sliderInput("numHab2", label = "Número de Habitaciones",
min = 1, max = 3, value = 1, step = 1)
),# Termina el panel condicional "Apartamento"
dateInput("date", "Fecha de Inicio", value = "2008-08-01",
min = "2008-08-01", max = "2015-01-01",
format = "mm-yyyy", startview = "year"),
p("Nota: el día del mes seleccionado es indiferente, se toman en cuenta los datos del mes completo")
), # termina sidebarPanel
mainPanel(
plotlyOutput("ts")
)
)# termina sidebarLayout
),# termina el panel "Serie de Tiempo"
tabPanel("Análisis Gráfico",
sidebarLayout(
sidebarPanel(
selectInput("descMet", label = "Método de Descomposición",
choices = c("STL", "Medias Moviles")),
sliderInput("numDif", label = "Número de Diferencias",
min = 0, max = 4, value = 0, step = 1),
sliderInput("numDifEst", label = "Número de Diferencias Estacionales",
min = 0, max = 4, value = 0, step = 1),
selectInput("transf", label = "Transformación",
choices = c("Ninguna", "Raiz Cuadrada",
"Logaritmo", "Box-Cox")),
conditionalPanel( # Por si seleccionan "Box-Cox"
condition = "input.transf == 'Box-Cox'",
sliderInput("lambda", label = "Valor de Lambda",
min = -1, max = 2, value = 1, step = .05)
),# Termina el panel condicional "Box-Cox"
selectInput("auto", label = "Auto-arima",
choices = c("Sí", "No")),
conditionalPanel( # Por si seleccionan "Autoarima"
condition = "input.auto == 'No'",
sliderInput("ar", label = "Valor de p (componentes autorregresivos)",
min = 0, max = 5, value = 0, step = 1),
sliderInput("ma", label = "Valor de q (componentes de media móvil)",
min = 0, max = 5, value = 0, step = 1),
sliderInput("sar", label = "Valor de P (componentes autorregresivos estacionales)",
min = 0, max = 5, value = 0, step = 1),
sliderInput("sma", label = "Valor de Q (componentes de media móvil estacionales)",
min = 0, max = 5, value = 0, step = 1)
),# Termina el panel condicional "Autoarima"
), # termina sidebarPanel
mainPanel(
verticalLayout(
conditionalPanel( # Por si seleccionan "Medias Moviles"
condition = "input.descMet == 'Medias Moviles'",
plotlyOutput("descomp")
),# Termina el panel condicional "Medias Moviles"
conditionalPanel( # Por si seleccionan "STL"
condition = "input.descMet == 'STL'",
highchartOutput("descomp_STL")
),# Termina el panel condicional "STL"
plotOutput("acf")
)# termina verticalLayout
)# termina main panel
)# termina sidebarLayout
),# termina el panel "Analisis Grafico"
tabPanel("Modelo",
htmlOutput("modelo"),
tabsetPanel(type = "pills",
tabPanel("Gráficos",
splitLayout(
plotlyOutput("grafComp"),
plotOutput("resid") # se puede sacar de Ljung-Box test
),# termina splitLayout
),# termina panel "Graficos"
tabPanel("Pruebas",
flowLayout(
wellPanel(
h2("Prueba de Ljung-Box"),
p(HTML("<b>Ho:</b> Los residuales se distribuyen de forma independiente.")),
p(HTML("<b>Ha:</b> Los residuales no se distribuyen de forma independiente.")),
htmlOutput("ljung") # p-value y si se rechaza o no Ho
),# termina wellPanel Ljung-Box test
wellPanel(
h2("Prueba aumentada de Dickey-Fuller"),
p(HTML("<b>Ho:</b> Hay una raíz unitaria, por lo que los residuales no presentan estacionariedad.")),
p(HTML("<b>Ha:</b> Los residuales son estacionarios.")),
htmlOutput("df") # p-value y si se rechaza o no Ho
),# termina wellPanel Augmented Dickey-Fuller test
wellPanel(
h2("Prueba KPSS"),
p(HTML("<b>Ho:</b> Los residuales presentan estacionariedad.")),
p(HTML("<b>Ha:</b> Los residuales no son estacionarios")),
p(HTML("Para un nivel de significancia de 10%, se compara el estadístico de prueba con el valor crítico: <b>0.347</b>")),
htmlOutput("kpss") # p-value y si se rechaza o no Ho
)# termina wellPanel Augmented KPSS test
)# termina flowLayout
)# termina panel "Pruebas"
)# termina tabsetPanel
),# termina el panel "Modelo"
tabPanel("Predicción",
sidebarLayout(
sidebarPanel(
sliderInput("tempPred", label = "Tiempo de predicción (meses)",
min = 6, max = 48, value = 12, step = 1)
), # termina sidebarPanel
mainPanel(
plotOutput("pred"),
DTOutput("valPred"),
downloadButton("descarga", label = "Descargar Tabla")
)# termina main panel
)# termina sidebarLayout
)# termina el panel "Prediccion"
)
server <- function(input, output, session) {
#Variables
data_cool <- data_cool
serie_t <- reactive({
if(input$propType == "Casa"){
date_aux <- input$date
lubridate::day(date_aux) <- 1
data1 <- data_cool %>% filter(bedrooms == input$numHab) %>%  filter(propertyType == "house") %>% filter(datesold >= date_aux)
data_month <- data1 %>% mutate(month = month(datesold), year = year(datesold)) %>% group_by(year, month) %>%
summarise(price = mean(price))
serie_t <- stats::ts(data = data_month$price, start = lubridate::year(date_aux),frequency = 12)
return(serie_t)
}else{
date_aux <- input$date
lubridate::day(date_aux) <- 1
data1 <- data_cool %>% filter(bedrooms == input$numHab2) %>%  filter(propertyType == "unit") %>% filter(datesold >= date_aux)
data_month <- data1 %>% mutate(month = month(datesold), year = year(datesold)) %>% group_by(year, month) %>%
summarise(price = mean(price))
serie_t <- stats::ts(data = data_month$price, start = lubridate::year(date_aux),frequency = 12)
return(serie_t)
}
})
serie_drag <- reactive({
serie_drag <- serie_t()
if(input$transf == "Raiz Cuadrada"){
serie_drag <- sqrt(serie_drag)
}else if(input$transf == "Logaritmo"){
serie_drag <- log(serie_drag, base=exp(1))
}else if(input$transf == "Box-Cox"){
serie_drag <-  forecast::BoxCox(serie_drag, input$lambda)
}
return(serie_drag)
})
serie_t_trans <- reactive({
serie_t_trans <- serie_drag()
if(input$numDif != 0){
serie_t_trans <- serie_t_trans %>% diff(input$numDif)
}
if(input$numDifEst !=0){
serie_t_trans <- serie_t_trans %>% diff(differences = input$numDifEst, lag=12)
}
return(serie_t_trans)
})
modelo_bueno <- reactive({
if(input$auto == "No"){
AR <- input$ar
MA <- input$ma
SAR <- input$sar
SMA <- input$sma
d <- input$numDif
D <- input$numDifEst
}else{
aa <- serie_t_trans() %>% forecast::auto.arima()
AR <- aa$arma[1]
MA <- aa$arma[2]
SAR <- aa$arma[3]
SMA <- aa$arma[4]
d <- aa$arma[6] + input$numDif
D <- aa$arma[7] + input$numDifEst
}
modelo <- forecast::Arima(serie_drag(), order = c(AR, d, MA), seasonal = c(SAR, D, SMA), lambda = NULL)
return(modelo)
})
tabla_pred <- reactive({
data.frame("Predic_promedio" = pred()$mean,"Limite Inferior" = pred()$lower,"Limite Superior" = pred()$upper)
})
pred <- reactive({
pred <- modelo_bueno() %>% forecast::forecast(h = input$tempPred, level = c(90,95))
if(input$transf == "Raiz Cuadrada"){
pred$x <- (pred$x)^2
pred$lower <- (pred$lower)^2
pred$upper <- (pred$upper)^2
pred$mean  <- (pred$mean)^2}else if(input$transf == "Logaritmo"){
pred$x <- exp(pred$x)
pred$lower <- exp(pred$lower)
pred$upper <- exp(pred$upper)
pred$mean  <- exp(pred$mean)} else if(input$transf == "Box-Cox"){
pred$x <- forecast::InvBoxCox(pred$x, lambda = input$lambda)
pred$lower <- forecast::InvBoxCox(pred$lower, lambda = input$lambda)
pred$upper <- forecast::InvBoxCox(pred$upper, lambda = input$lambda)
pred$mean  <- forecast::InvBoxCox(pred$mean, lambda = input$lambda)
}
return(pred)
})
#Output Serie de Tiempo
output$ts <- renderPlotly({
(forecast::autoplot(ts(serie_t(),start = lubridate::year(input$date),frequency = 12), color = "black") +
labs(x = "Años", y = "Precio mensual promedio") + scale_y_continuous(label = comma)) +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
})
#Outputs analisis grafico
output$descomp_STL <- renderHighchart({
if(input$descMet == "STL"){
highcharter::hchart(stl(serie_t_trans(), s.window = "per")) %>% hc_title(text = "Descomposición temporal")
}
})
output$descomp <- renderPlotly({
if(input$descMet == "Medias Moviles"){
data_cool_h_2_descomposition <- stats::decompose(serie_t_trans(), type = "additive")
(tibble(time = time(data_cool_h_2_descomposition$x),
Datos = data_cool_h_2_descomposition$x,
Tendencia = data_cool_h_2_descomposition$trend,
Estacionalidad = data_cool_h_2_descomposition$seasonal,
Remanente = data_cool_h_2_descomposition$random) %>%
gather("type", "value", 2:5) %>%
mutate(type = factor(type, levels = c("Datos", "Tendencia", "Estacionalidad", "Remanente"))) %>%
ggplot2::ggplot(aes(x = time, y = value)) +
geom_line() +
facet_grid(type~., scales = "free_y") +
labs(x = "Años", y = "Precio promedio mensual") +
scale_y_continuous(label = comma)+
ggtitle("Descomposición temporal")) %>% plotly::ggplotly()
}
})
output$acf <- renderPlot({
acf <- autoplot(acf(serie_t_trans(),plot = FALSE), colour = "darkorchid4", size = 1) +
geom_hline(yintercept = 0) +
ggtitle("Autocorrelación Simple") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"), plot.title = element_text(size = 14, face = "bold"))
pacf <- autoplot(pacf(serie_t_trans(),plot = FALSE), colour = "darkorchid4", size = 1) +
geom_hline(yintercept = 0) +
ggtitle("Autocorrelación Parcial") +
labs(y = "Partial ACF") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"), plot.title = element_text(size = 14, face = "bold"))
acf + pacf
})
#Outputs modelo
output$modelo <- renderUI({
HTML(paste("<h1>", modelo_bueno(), "</h1>", "<h2>",
"AIC =", toString(modelo_bueno()$aic), "</h2>"))
})
output$grafComp <- renderPlotly({
autoplot(serie_drag(), color = "black") +
autolayer(fitted(modelo_bueno()), color = "royalblue1") +
labs(y = "Promedio mensual de precios", x = "Tiempo")+
scale_y_continuous(label = comma)+
ggtitle("Gráfica comparativa") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
})
output$resid <- renderPlot({
gg1 <- autoplot(modelo_bueno()$residuals) + labs(x = NULL, y = NULL)+
scale_y_continuous(label = comma)+
ggtitle("Residuales del modelo")+
theme(plot.title = element_text(size = 16)) +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
gg2 <- autoplot(acf(modelo_bueno()$residuals,plot = FALSE), colour = "darkorchid4", size = 1) +
geom_hline(yintercept = 0)+
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid")) + ggtitle(NULL)
gg3 <- ggpubr::gghistogram(modelo_bueno()$residuals) + labs(x = "Residuales", y = "Conteo") + scale_x_continuous(label = comma)
(gg1)/ (gg2 + gg3)
})
#Output pruebas
output$ljung <- renderUI({
ljung <- forecast::checkresiduals(modelo_bueno(), plot = F)
p_val <- NULL
res <- NULL
if(ljung$p.value < .05){
res <- "se rechaza la hipótesis de independencia en los residuales."
}else{
res <- "no se rechaza la hipótesis de independencia en los residuales."
}
if(ljung$p.value < 2*(10^(-16))){
p_val <- "<2e-16"
}else{
p_val <- toString(ljung$p.value)
}
return(paste("Se obtuvo un <b>p-value</b> de:<b>", p_val, '</b><br/>',
"Para un nivel de significancia de 5%,<b>", res, "</b>") %>% HTML())
})
output$df <- renderUI({
ADF <- tseries::adf.test(modelo_bueno()$residuals)
p_val <- NULL
res <- NULL
if(ADF$p.value < .05){
res <- "se rechaza la existencia de una raíz unitaria, por lo que se acepta que los residuales son estacionarios."
}else{
res <- "no se rechaza la no estacionariedad en residuales."
}
if(ADF$p.value < 0.01){
p_val <- "<0.01"
}else{
p_val <- toString(ADF$p.value)
}
return(paste("Se obtuvo un <b>p-value</b> de:<b>", p_val, '</b><br/>',
"Para un nivel de significancia de 5%,<b>", res, "</b>") %>% HTML())
})
output$kpss <- renderUI({
KPSS <- tseries::kpss.test(modelo_bueno()$residuals)
est <- NULL
res <- NULL
if(KPSS$statistic >= 0.347){
res <- "se rechaza la estacionariedad en residuales."
}else{
res <- "no se rechaza la estacionariedad en residuales."
}
if(KPSS$statistic < 2*(10^(-16))){
est <- "<2e-16"
}else{
est <- toString(KPSS$statistic)
}
return(paste("Se obtuvo un <b>estadístico de prueba</b> de:<b>", est, '</b><br/>',
"Para un nivel de significancia de 10%,<b>", res, "</b>") %>% HTML())
})
#Outputs Prediccion
output$pred <- renderPlot({
pred() %>% autoplot()+
scale_y_continuous(label = comma)+
labs(x = "Tiempo", y = "Precio mensual promedio ") +
theme_light() +
theme(axis.line = element_line(colour = "black", linetype = "solid"))
})
output$valPred <- renderDT(tabla_pred(), options = list(lengthChange = FALSE, pageLength = 10))
output$descarga <- downloadHandler(
filename = function(){"predicciones.csv"},
content = function(fname){
write.csv(tabla_pred(), fname)
}
)
}
shinyApp(ui, server)
}
